"나는 이미 HTML/CSS/Vanilla JavaScript 기반의 심리 테스트 웹앱을 운영 중이며, index.html에 첫 번째 테스트가 구동되고 있습니다. 이제 동일한 페이지에 두 번째 테스트인 '당신에게 어울리는 한국 여행지'를 추가해야 합니다. 아래 요구사항을 충돌 없이 통합하고, 코드를 스스로 철저하게 테스트 및 디버깅하여 완성하십시오. 모든 새로운 요소는 travel-test- 접두사를 사용해야 하며, GitHub Pages 배포를 위해 모든 경로가 상대 경로(./path)인지 확인하고 최종 코드를 제시하십시오."1. 통합 및 구조 지침 (최우선)시작점 통합: index.html의 메인 콘텐츠 영역에 첫 번째 테스트를 시작하는 버튼(또는 컨테이너)과 명확히 구분되는 **두 번째 테스트 시작 버튼(id="start-travel-test-button")**을 추가하십시오.독립 구동: 두 번째 테스트의 전체 로직(질문 컨테이너, 로직, 결과)은 <div id="travel-test-container"> 내부에서만 실행되어야 하며, 기존 첫 번째 테스트의 변수, 함수, UI와 완벽하게 분리되어야 합니다.파일 및 경로: index.html, style.css, script.js 파일을 사용하며, 모든 리소스 경로는 **상대 경로(예: ./style.css)**를 사용하십시오.2. 세부 기능 구현 지침A. HTML 구조 (index.html에 추가)메인 페이지에 두 번째 테스트 시작 버튼을 명시적으로 추가합니다:HTML<button id="start-travel-test-button">테스트 2: 당신에게 어울리는 한국 여행지 찾기</button>
클릭 시 첫 번째 테스트 컨테이너는 숨기고, travel-test-container를 보이게 하는 초기 UI 제어 로직을 script.js에 작성해야 합니다.결과 이미지 영역: 결과 페이지에 MBTI-AT 유형별 여행지 이미지를 표시할 <img id="travel-test-result-image" alt="여행지 이미지"> 요소를 포함하십시오.B. JavaScript 로직 (script.js에 통합)데이터 정의 (travelTest 객체):질문 데이터: 18개 질문의 5축 배분($E/I, S/N, T/F, J/P, A/T$: 4/4/4/4/2)을 travelTest.questionsData에 정확히 정의하십시오.결과 데이터: 32가지 MBTI-AT 유형별로 제목 키, 설명 키, 그리고 해당 여행지의 이미지 파일명을 포함하여 travelTest.resultsData에 정의하십시오. (파일명은 배포 시 사용할 실제 경로를 예상하여 작성합니다. 예: image: 'images/busan_estja.webp')MBTI-AT 계산:5축 점수 누적 및 최종 5자리 유형 문자열을 출력하는 calculateResult() 함수를 구현하십시오.핵심 지표 '여행 성향 일치율' 계산:계산 로직: 5개 축 점수 절대값의 합계를 최대 점수 18로 나눈 백분율로 matchRate를 계산하고 출력하십시오.다국어 지원 (Localization):travelTestLocalization 객체 내에 한국어(ko), 영어(en), 일본어(ja), 스페인어(es) 4개 언어의 텍스트를 구조화하십시오. Agent 3는 이 구조에 맞춰 모든 UI 텍스트를 매핑하는 로직을 구현해야 합니다.C. 구동 함수 정의initTravelTest() 함수: <button id="start-travel-test-button"> 클릭 이벤트를 리스너에 등록하고, 테스트 시작 시 기존 테스트 컨테이너를 숨기고 travel-test-container를 보이게 하는 초기화 로직을 정의하십시오.3. Agent 3 자율 테스트 및 최종 제출 지침Agent 3는 코드를 생성한 후, 다음 4단계 검증 프로세스를 자율적으로 수행해야 합니다.통합 테스트: "테스트 2 시작 버튼" 클릭 전후로 첫 번째 테스트의 UI가 오작동하지 않는지 확인하십시오.UI/UX 테스트: 질문 18개 전체 응답 흐름, 이름 입력 저장, 결과 페이지의 제목, 설명, 지표(%)가 모두 정상적으로 출력되는지 브라우저 환경에서 직접 확인하십시오.배포 환경 검토: **모든 리소스 경로(CSS, JS, 이미지)**가 GitHub Pages 환경에 적합한 **상대 경로(./path` 또는 파일명만)**로 설정되었는지 최종 확인하십시오.최종 코드 제출: 검증이 완료된 index.html, style.css, script.js 세 파일의 최종 코드를 사용자에게 제시하십시오.